// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Students_Affaires.Data;

#nullable disable

namespace Students_Affaires.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240611130529_DB3")]
    partial class DB3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Students_Affaires.Models.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageAdmin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phone")
                        .HasColumnType("int");

                    b.HasKey("AdminID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Students_Affaires.Models.Affair", b =>
                {
                    b.Property<int>("AffairID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AffairID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("AffairName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageAffairl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phone")
                        .HasColumnType("int");

                    b.HasKey("AffairID");

                    b.HasIndex("AdminID");

                    b.ToTable("Affairs");
                });

            modelBuilder.Entity("Students_Affaires.Models.Control", b =>
                {
                    b.Property<int>("ControlID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ControlID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("ControlName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phone")
                        .HasColumnType("int");

                    b.HasKey("ControlID");

                    b.HasIndex("AdminID");

                    b.ToTable("Controls");
                });

            modelBuilder.Entity("Students_Affaires.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.HasKey("CourseID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Students_Affaires.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phone")
                        .HasColumnType("int");

                    b.HasKey("DoctorID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Students_Affaires.Models.Engineer", b =>
                {
                    b.Property<int>("EngineerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EngineerID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageEngineer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phone")
                        .HasColumnType("int");

                    b.HasKey("EngineerID");

                    b.ToTable("Engineers");
                });

            modelBuilder.Entity("Students_Affaires.Models.Enrollment", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("CourseID", "StudentID");

                    b.HasIndex("StudentID");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("Students_Affaires.Models.Give", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.HasKey("CourseID", "DoctorID");

                    b.HasIndex("DoctorID");

                    b.ToTable("Give");
                });

            modelBuilder.Entity("Students_Affaires.Models.GiveCourse", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("EngineerID")
                        .HasColumnType("int");

                    b.HasKey("CourseID", "EngineerID");

                    b.HasIndex("EngineerID");

                    b.ToTable("GiveCourse");
                });

            modelBuilder.Entity("Students_Affaires.Models.Grade", b =>
                {
                    b.Property<int>("GradeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("GradeOfStudent")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("GradeID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentID");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("Students_Affaires.Models.Responsible", b =>
                {
                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("EngineerID")
                        .HasColumnType("int");

                    b.HasKey("DoctorID", "EngineerID");

                    b.HasIndex("EngineerID");

                    b.ToTable("Responsible");
                });

            modelBuilder.Entity("Students_Affaires.Models.StoreCourse", b =>
                {
                    b.Property<int>("ControlID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("AffairID")
                        .HasColumnType("int");

                    b.HasKey("ControlID", "CourseID", "AffairID");

                    b.HasIndex("AffairID");

                    b.HasIndex("CourseID");

                    b.ToTable("StoreCourse");
                });

            modelBuilder.Entity("Students_Affaires.Models.StoreDoctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("ControlID")
                        .HasColumnType("int");

                    b.Property<int>("AffairID")
                        .HasColumnType("int");

                    b.HasKey("DoctorID", "ControlID", "AffairID");

                    b.HasIndex("AffairID");

                    b.HasIndex("ControlID");

                    b.ToTable("StoreDoctor");
                });

            modelBuilder.Entity("Students_Affaires.Models.StoreEngineer", b =>
                {
                    b.Property<int>("ControlID")
                        .HasColumnType("int");

                    b.Property<int>("EngineerID")
                        .HasColumnType("int");

                    b.Property<int>("AffairID")
                        .HasColumnType("int");

                    b.HasKey("ControlID", "EngineerID", "AffairID");

                    b.HasIndex("AffairID");

                    b.HasIndex("EngineerID");

                    b.ToTable("StoreEngineer");
                });

            modelBuilder.Entity("Students_Affaires.Models.StoreStudent", b =>
                {
                    b.Property<int>("ControlID")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("AffairID")
                        .HasColumnType("int");

                    b.HasKey("ControlID", "StudentID", "AffairID");

                    b.HasIndex("AffairID");

                    b.HasIndex("StudentID");

                    b.ToTable("StoreStudent");
                });

            modelBuilder.Entity("Students_Affaires.Models.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentLevel")
                        .HasColumnType("int");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phone")
                        .HasColumnType("int");

                    b.HasKey("StudentID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Students_Affaires.Models.TeachesStudent", b =>
                {
                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("DoctorID", "StudentID");

                    b.HasIndex("StudentID");

                    b.ToTable("TeachesStudent");
                });

            modelBuilder.Entity("Students_Affaires.Models.TeachesStudent2", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("EngineerID")
                        .HasColumnType("int");

                    b.HasKey("StudentID", "EngineerID");

                    b.HasIndex("EngineerID");

                    b.ToTable("TeachesStudent2");
                });

            modelBuilder.Entity("Students_Affaires.Models.Affair", b =>
                {
                    b.HasOne("Students_Affaires.Models.Admin", null)
                        .WithMany("Affairs")
                        .HasForeignKey("AdminID");
                });

            modelBuilder.Entity("Students_Affaires.Models.Control", b =>
                {
                    b.HasOne("Students_Affaires.Models.Admin", null)
                        .WithMany("Controls")
                        .HasForeignKey("AdminID");
                });

            modelBuilder.Entity("Students_Affaires.Models.Enrollment", b =>
                {
                    b.HasOne("Students_Affaires.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students_Affaires.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Students_Affaires.Models.Give", b =>
                {
                    b.HasOne("Students_Affaires.Models.Course", "Course")
                        .WithMany("Gives")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students_Affaires.Models.Doctor", "Doctor")
                        .WithMany("Gives")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Students_Affaires.Models.GiveCourse", b =>
                {
                    b.HasOne("Students_Affaires.Models.Course", "Course")
                        .WithMany("GiveCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students_Affaires.Models.Engineer", "Engineer")
                        .WithMany("GiveCourses")
                        .HasForeignKey("EngineerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Engineer");
                });

            modelBuilder.Entity("Students_Affaires.Models.Grade", b =>
                {
                    b.HasOne("Students_Affaires.Models.Course", "Course")
                        .WithMany("Grades")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students_Affaires.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Students_Affaires.Models.Responsible", b =>
                {
                    b.HasOne("Students_Affaires.Models.Doctor", "Doctor")
                        .WithMany("Responsibles")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students_Affaires.Models.Engineer", "Engineer")
                        .WithMany("Responsibles")
                        .HasForeignKey("EngineerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Engineer");
                });

            modelBuilder.Entity("Students_Affaires.Models.StoreCourse", b =>
                {
                    b.HasOne("Students_Affaires.Models.Affair", "Affair")
                        .WithMany("StoreCourses")
                        .HasForeignKey("AffairID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students_Affaires.Models.Control", "Control")
                        .WithMany("StoreCourses")
                        .HasForeignKey("ControlID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students_Affaires.Models.Course", "Course")
                        .WithMany("StoreCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Affair");

                    b.Navigation("Control");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Students_Affaires.Models.StoreDoctor", b =>
                {
                    b.HasOne("Students_Affaires.Models.Affair", "Affair")
                        .WithMany("StoreDoctors")
                        .HasForeignKey("AffairID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students_Affaires.Models.Control", "Control")
                        .WithMany("StoreDoctors")
                        .HasForeignKey("ControlID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students_Affaires.Models.Doctor", "Doctor")
                        .WithMany("StoreDoctors")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Affair");

                    b.Navigation("Control");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Students_Affaires.Models.StoreEngineer", b =>
                {
                    b.HasOne("Students_Affaires.Models.Affair", "Affair")
                        .WithMany("StoreEngineers")
                        .HasForeignKey("AffairID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students_Affaires.Models.Control", "Control")
                        .WithMany("StoreEngineers")
                        .HasForeignKey("ControlID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students_Affaires.Models.Engineer", "Engineer")
                        .WithMany("StoreEngineers")
                        .HasForeignKey("EngineerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Affair");

                    b.Navigation("Control");

                    b.Navigation("Engineer");
                });

            modelBuilder.Entity("Students_Affaires.Models.StoreStudent", b =>
                {
                    b.HasOne("Students_Affaires.Models.Affair", "Affair")
                        .WithMany("StoreStudents")
                        .HasForeignKey("AffairID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students_Affaires.Models.Control", "Control")
                        .WithMany("StoreStudents")
                        .HasForeignKey("ControlID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students_Affaires.Models.Student", null)
                        .WithMany("StoreStudents")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Affair");

                    b.Navigation("Control");
                });

            modelBuilder.Entity("Students_Affaires.Models.TeachesStudent", b =>
                {
                    b.HasOne("Students_Affaires.Models.Doctor", "Doctor")
                        .WithMany("TeachesStudents")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students_Affaires.Models.Student", "Student")
                        .WithMany("TeachesStudents")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Students_Affaires.Models.TeachesStudent2", b =>
                {
                    b.HasOne("Students_Affaires.Models.Engineer", "Engineer")
                        .WithMany("TeachesStudent2s")
                        .HasForeignKey("EngineerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students_Affaires.Models.Student", "Student")
                        .WithMany("TeachesStudent2s")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Engineer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Students_Affaires.Models.Admin", b =>
                {
                    b.Navigation("Affairs");

                    b.Navigation("Controls");
                });

            modelBuilder.Entity("Students_Affaires.Models.Affair", b =>
                {
                    b.Navigation("StoreCourses");

                    b.Navigation("StoreDoctors");

                    b.Navigation("StoreEngineers");

                    b.Navigation("StoreStudents");
                });

            modelBuilder.Entity("Students_Affaires.Models.Control", b =>
                {
                    b.Navigation("StoreCourses");

                    b.Navigation("StoreDoctors");

                    b.Navigation("StoreEngineers");

                    b.Navigation("StoreStudents");
                });

            modelBuilder.Entity("Students_Affaires.Models.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("GiveCourses");

                    b.Navigation("Gives");

                    b.Navigation("Grades");

                    b.Navigation("StoreCourses");
                });

            modelBuilder.Entity("Students_Affaires.Models.Doctor", b =>
                {
                    b.Navigation("Gives");

                    b.Navigation("Responsibles");

                    b.Navigation("StoreDoctors");

                    b.Navigation("TeachesStudents");
                });

            modelBuilder.Entity("Students_Affaires.Models.Engineer", b =>
                {
                    b.Navigation("GiveCourses");

                    b.Navigation("Responsibles");

                    b.Navigation("StoreEngineers");

                    b.Navigation("TeachesStudent2s");
                });

            modelBuilder.Entity("Students_Affaires.Models.Student", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Grades");

                    b.Navigation("StoreStudents");

                    b.Navigation("TeachesStudent2s");

                    b.Navigation("TeachesStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
